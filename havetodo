
//	segfault	v ./cub3D good_cub/cheese_maze.cub
// psque ya .cub mais dcp ca va dans wgas et c`est cense exit



deplacement  //

	- w & s avance/recule via calcul arithmetique du vecteur_pos_player et vecteur_look

	- a & d calcul arithmetique avec vecteur {0.0159, 0} || {0, 0.0159}

pour l'instatn bruteforce de la pos du joueur pour le mapping




look	//

		t_mgam2f	look;

	faire une fonction qui prend l'event si c'est right or press_left

	lookMove()



fonction cube qui prend en parametre un point et l'aire du cube
		{player_pos.x, player_pos.y}, SPACE * SPACE


faire en sorte que la width et la height de la fenetre soit des dimensions de la map

creer les collisions
	// convertir la position t_mgam2f player_pos qui est centree sur la map en sa position 2D
	// _2Dplayer = {roundf(player_pos.X), roundf(player_pos.y)}
		arrondir l'unité inférieure

	si event WASD
		--> verifier que le centre du joueur n'est pas dans un cube de mur
	update _2Dplayer à chaque event WASD
		--> si l'event mets le centre du player dans un mur ne pas faire l'accien, ne pas bouger les variables




dans la fonction DDA					// en ayant convertit le newpoint en position 2d pour regarder dans le tableau
	verifier a chaque fois qu'on pose un pixel si par rapport a la cub->map->matrix[newPoint.y][newPoint.x] :: ce charactere la ne soit pas un 1
													si c'est un '1' on return ; de la fonction en leger gui

pour chaque rayon qu'on s'apprete a lancer:

	// calculer le vecteur forme par le segment des deux points.
		definir x_step et y_step qui correspondent a de combien on avance pour avance d'une unite (SPACE dans notre cas)

	// mettre en place que le point de look atteigne les limites de la fenetres
		le resize aux limites de la minimap si possible pour opti ?
	
	monstre 3:38 juste on vibe


le vecteur look doit tous le temps avoir une magnitude de tabs(cub->data->height - pos.y, cub->data->width - pos.x);
						
